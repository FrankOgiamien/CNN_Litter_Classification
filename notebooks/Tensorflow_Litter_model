# 1. SETUP
import tensorflow as tf
import os
import cv2
import imghdr
from matplotlib import pyplot as plt

gpus = tf.config.experimental.list_physical_devices('GPU')
for gpu in gpus:
    tf.config.experimental.set_memory_growth(gpu, True)

# 2. VIEW SAMPLES OF THE DATA
img = cv2.imread("D:\\Frank\\Open_Litter_map\\DeepLearning\\Train\\Coffeecup\\CoffeeCup1.jpg")
img.shape
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))    # using a color channel converter to get to RGB



# 3. CREATE A DATASET
# Load the image Data into a Tensorflow Pipeline     tf.data.Dataset??  to display help.
data = tf.keras.utils.image_dataset_from_directory('Train')

data_iterator = data.as_numpy_iterator()
batch = data_iterator.next()



# 4. SCALE THE DATA
# Preprocess the data  convert to grayscale    x are the images, y are the labels
data = data.map(lambda x,y: (x/255, y))
data.as_numpy_iterator().next()



# 5. SPLIT THE DATA INTO TRAINING AND TESTING
len(data)

train_size = int(len(data)*.7)
val_size = int(len(data)*.2)
test_size = int(len(data)*.1)+1
train_size+val_size+test_size

train = data.take(train_size)
val = data.skip(train_size).take(val_size)
test = data.skip(train_size+val_size).take(test_size)



# 6. BUILD THE DEEPLEARNING NETWORK
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten

model = Sequential()
model.add(Conv2D(16, (3,3), 1, activation = 'relu', input_shape=(256,256,3)))      #stride is 1
model.add(MaxPooling2D())
model.add(Conv2D(32, (3,3), 1, activation = 'relu'))
model.add(MaxPooling2D())
model.add(Conv2D(16, (3,3), 1, activation = 'relu'))
model.add(MaxPooling2D())
model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(Dense(1, activation = 'sigmoid'))

model.compile('adam', loss=tf.losses.BinaryCrossentropy(), metrics=['accuracy'])
model.summary()



# 7. TRAIN THE MODEL
logdir = 'logs'
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=logdir)
hist = model.fit(train, epochs=10, validation_data=val, callbacks=[tensorboard_callback])

fig = plt.figure()
plt.plot(hist.history['loss'], color='teal', label='loss')
plt.plot(hist.history['val_loss'], color='orange', label='val_loss')
fig.suptitle('Loss', fontsize=20)
plt.legend(loc="upper left")
plt.show()
